<application>
  <component name="AppStorage">
    <histories>
      <item value="The following are * all valid provision method declarations:" />
      <item value="Each method may have a {@link Qualifier} annotation as well" />
      <item value="Provision" />
      <item value="Provision methods have no parameters" />
      <item value="Every type annotated with @Component must contain at least one abstract component method. Component methods may have any name, but must have signatures that conform to either provision or members-injection contracts." />
      <item value="Injects dependencies into the fields and methods on instances of type T. Ignores the presence or absence of an injectable constructor." />
      <item value="Injects dependencies into the fields and methods of instance. Ignores the presence or absence of an injectable constructor. Whenever a Component creates an instance, it performs this injection automatically (after first performing constructor injection), so if you're able to let the component create all your objects for you, you'll never need to use this method." />
      <item value="Injects dependencies into the fields and methods of {@code instance}. Ignores the presence or * absence of an injectable constructor." />
      <item value="conform" />
      <item value="Ordering of * injection among fields and among methods in the same class is not specified." />
      <item value="Fields and methods * in superclasses are injected before those in subclasses." />
      <item value="Constructors are * injected first, followed by fields, and then methods." />
      <item value="An injectable member may have any access * modifier (private, package-private, protected, public)." />
      <item value="as well as" />
      <item value="May apply to static * as well as instance members." />
      <item value="Identifies injectable constructors, methods, and fields." />
      <item value="fields" />
      <item value="Annotates an interface or abstract class for which a fully-formed, dependency-injected implementation is to be generated from a set of modules(). The generated class will have the name of the type annotated with @Component prepended with Dagger. For example, @Component interface MyComponent {...} will produce an implementation named DaggerMyComponent." />
      <item value="Annotates an interface or abstract class for which a fully-formed," />
      <item value="formed" />
      <item value="fully-formed" />
      <item value="Annotates an interface or abstract class for which a fully-formed" />
      <item value="Identifies qualifier annotations. Anyone can define a new qualifier. A * qualifier annotation:" />
      <item value="exercise" />
      <item value="guaranteed" />
      <item value="Typically implemented by an injector. For * any type {@code T} that can be injected, you can also inject * {@code Provider&lt;T&gt;}. Compared to injecting {@code T} directly, injecting * {@code Provider&lt;T&gt;} enables:" />
      <item value="Provider" />
      <item value="Members" />
      <item value="example" />
      <item value="Future" />
      <item value="阶梯式" />
      <item value="色情鉴定" />
      <item value="鉴定色情" />
      <item value="鉴定" />
      <item value="鉴黄" />
      <item value="原子" />
      <item value="Take Shot" />
      <item value="Captured" />
      <item value="couldn't make a guess for" />
      <item value="Room cannot verify the data integrity. Looks like you've changed schema but forgot to update the version number. You can simply fix this by increasing the version number." />
      <item value="You can simply fix this by increasing the version number." />
      <item value="Looks like you've changed schema but forgot to update the version number." />
      <item value="Room cannot verify the data integrity." />
      <item value="request a custom &lt;em&gt;positive&lt;/em&gt; amount." />
      <item value="positive" />
      <item value="that accepts parameter type" />
      <item value="No injector factory bound for Class&lt;com.github.mrzhqiang.randall.ui.AddAccountActivity&gt;" />
      <item value="StrictMode policy violation; ~duration=4 ms: android.os.strictmode.DiskReadViolation" />
      <item value="StrictMode policy violation; ~duration=179 ms: android.os.strictmode.DiskReadViolation" />
      <item value="Atomically clears the container, then disposes all the previously contained Disposables" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="45" />
        <entry key="ENGLISH" value="46" />
        <entry key="ROMANIAN" value="1" />
      </map>
    </option>
  </component>
</application>